// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jtN/1X/89P7TfwcAAP//cBCjSo04AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
